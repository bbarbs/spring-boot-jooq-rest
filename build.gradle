buildscript {
	ext {
		springBootVersion = '1.5.9.RELEASE'
		myBatisSqlMapVersion = '2.3.0'
		jooqVersion = '3.10.3'
		h2Version = '1.4.196'
		mapstructVersion = '1.2.0.Final'
		springSwagger2Version = '2.7.0'
		springSwaggerUIVersion = '1.0.0'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jooq:jooq-codegen:${jooqVersion}")
		classpath("com.h2database:h2:${h2Version}")
	}
}

plugins {
	id 'net.ltgt.apt' version '0.8'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

group = 'com.jooq'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-aop')
	compile('org.springframework.boot:spring-boot-starter-jooq')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-security')
	runtime('com.h2database:h2')

	compile("org.apache.ibatis:ibatis-sqlmap:${myBatisSqlMapVersion}")

	compile("org.jooq:jooq:${jooqVersion}")
	compile("org.jooq:jooq-meta:${jooqVersion}")
	compile("org.jooq:jooq-codegen:${jooqVersion}")

	compile("org.mapstruct:mapstruct-jdk8:${mapstructVersion}")
	apt("org.mapstruct:mapstruct-processor:${mapstructVersion}")

	compile("io.springfox:springfox-swagger2:${springSwagger2Version}")
	compile("io.springfox.ui:springfox-swagger-ui-rfc6570:${springSwaggerUIVersion}")

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile("junit:junit")
}

//============================ JOOQ Generator ==============================

task jooqGenerator {
	def writer = new StringWriter()
	def xml = new groovy.xml.MarkupBuilder(writer)
			.configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.10.0.xsd') {
		jdbc() {
			driver('org.h2.Driver')
			url('jdbc:h2:~/test')
			user('test')
			password('test')
		}
		// See: https://www.jooq.org/doc/3.6/manual/code-generation/codegen-advanced/
		generator() {
			database() {
			}

			generate([:]) {
				pojos true
				daos true
				interfaces true
				springAnnotations true
			}
			target() {
				packageName('com.jooq')
				directory('src/generated/java')
			}
		}
	}

	org.jooq.util.GenerationTool.generate(
			javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
	)
}

sourceSets {
	main {
		java {
			srcDirs "src/main/java", "src/generated/java"
		}
	}
}

clean.doFirst {
	delete("src/generated/java")
}
