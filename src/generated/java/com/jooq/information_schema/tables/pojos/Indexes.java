/*
 * This file is generated by jOOQ.
*/
package com.jooq.information_schema.tables.pojos;


import com.jooq.information_schema.tables.interfaces.IIndexes;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Indexes implements IIndexes {

    private static final long serialVersionUID = 920195853;

    private String  tableCatalog;
    private String  tableSchema;
    private String  tableName;
    private Boolean nonUnique;
    private String  indexName;
    private Short   ordinalPosition;
    private String  columnName;
    private Integer cardinality;
    private Boolean primaryKey;
    private String  indexTypeName;
    private Boolean isGenerated;
    private Short   indexType;
    private String  ascOrDesc;
    private Integer pages;
    private String  filterCondition;
    private String  remarks;
    private String  sql;
    private Integer id;
    private Integer sortType;
    private String  constraintName;
    private String  indexClass;
    private Boolean affinity;

    public Indexes() {}

    public Indexes(Indexes value) {
        this.tableCatalog = value.tableCatalog;
        this.tableSchema = value.tableSchema;
        this.tableName = value.tableName;
        this.nonUnique = value.nonUnique;
        this.indexName = value.indexName;
        this.ordinalPosition = value.ordinalPosition;
        this.columnName = value.columnName;
        this.cardinality = value.cardinality;
        this.primaryKey = value.primaryKey;
        this.indexTypeName = value.indexTypeName;
        this.isGenerated = value.isGenerated;
        this.indexType = value.indexType;
        this.ascOrDesc = value.ascOrDesc;
        this.pages = value.pages;
        this.filterCondition = value.filterCondition;
        this.remarks = value.remarks;
        this.sql = value.sql;
        this.id = value.id;
        this.sortType = value.sortType;
        this.constraintName = value.constraintName;
        this.indexClass = value.indexClass;
        this.affinity = value.affinity;
    }

    public Indexes(
        String  tableCatalog,
        String  tableSchema,
        String  tableName,
        Boolean nonUnique,
        String  indexName,
        Short   ordinalPosition,
        String  columnName,
        Integer cardinality,
        Boolean primaryKey,
        String  indexTypeName,
        Boolean isGenerated,
        Short   indexType,
        String  ascOrDesc,
        Integer pages,
        String  filterCondition,
        String  remarks,
        String  sql,
        Integer id,
        Integer sortType,
        String  constraintName,
        String  indexClass,
        Boolean affinity
    ) {
        this.tableCatalog = tableCatalog;
        this.tableSchema = tableSchema;
        this.tableName = tableName;
        this.nonUnique = nonUnique;
        this.indexName = indexName;
        this.ordinalPosition = ordinalPosition;
        this.columnName = columnName;
        this.cardinality = cardinality;
        this.primaryKey = primaryKey;
        this.indexTypeName = indexTypeName;
        this.isGenerated = isGenerated;
        this.indexType = indexType;
        this.ascOrDesc = ascOrDesc;
        this.pages = pages;
        this.filterCondition = filterCondition;
        this.remarks = remarks;
        this.sql = sql;
        this.id = id;
        this.sortType = sortType;
        this.constraintName = constraintName;
        this.indexClass = indexClass;
        this.affinity = affinity;
    }

    @Override
    public String getTableCatalog() {
        return this.tableCatalog;
    }

    @Override
    public void setTableCatalog(String tableCatalog) {
        this.tableCatalog = tableCatalog;
    }

    @Override
    public String getTableSchema() {
        return this.tableSchema;
    }

    @Override
    public void setTableSchema(String tableSchema) {
        this.tableSchema = tableSchema;
    }

    @Override
    public String getTableName() {
        return this.tableName;
    }

    @Override
    public void setTableName(String tableName) {
        this.tableName = tableName;
    }

    @Override
    public Boolean getNonUnique() {
        return this.nonUnique;
    }

    @Override
    public void setNonUnique(Boolean nonUnique) {
        this.nonUnique = nonUnique;
    }

    @Override
    public String getIndexName() {
        return this.indexName;
    }

    @Override
    public void setIndexName(String indexName) {
        this.indexName = indexName;
    }

    @Override
    public Short getOrdinalPosition() {
        return this.ordinalPosition;
    }

    @Override
    public void setOrdinalPosition(Short ordinalPosition) {
        this.ordinalPosition = ordinalPosition;
    }

    @Override
    public String getColumnName() {
        return this.columnName;
    }

    @Override
    public void setColumnName(String columnName) {
        this.columnName = columnName;
    }

    @Override
    public Integer getCardinality() {
        return this.cardinality;
    }

    @Override
    public void setCardinality(Integer cardinality) {
        this.cardinality = cardinality;
    }

    @Override
    public Boolean getPrimaryKey_() {
        return this.primaryKey;
    }

    @Override
    public void setPrimaryKey_(Boolean primaryKey) {
        this.primaryKey = primaryKey;
    }

    @Override
    public String getIndexTypeName() {
        return this.indexTypeName;
    }

    @Override
    public void setIndexTypeName(String indexTypeName) {
        this.indexTypeName = indexTypeName;
    }

    @Override
    public Boolean getIsGenerated() {
        return this.isGenerated;
    }

    @Override
    public void setIsGenerated(Boolean isGenerated) {
        this.isGenerated = isGenerated;
    }

    @Override
    public Short getIndexType() {
        return this.indexType;
    }

    @Override
    public void setIndexType(Short indexType) {
        this.indexType = indexType;
    }

    @Override
    public String getAscOrDesc() {
        return this.ascOrDesc;
    }

    @Override
    public void setAscOrDesc(String ascOrDesc) {
        this.ascOrDesc = ascOrDesc;
    }

    @Override
    public Integer getPages() {
        return this.pages;
    }

    @Override
    public void setPages(Integer pages) {
        this.pages = pages;
    }

    @Override
    public String getFilterCondition() {
        return this.filterCondition;
    }

    @Override
    public void setFilterCondition(String filterCondition) {
        this.filterCondition = filterCondition;
    }

    @Override
    public String getRemarks() {
        return this.remarks;
    }

    @Override
    public void setRemarks(String remarks) {
        this.remarks = remarks;
    }

    @Override
    public String getSql() {
        return this.sql;
    }

    @Override
    public void setSql(String sql) {
        this.sql = sql;
    }

    @Override
    public Integer getId() {
        return this.id;
    }

    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    @Override
    public Integer getSortType() {
        return this.sortType;
    }

    @Override
    public void setSortType(Integer sortType) {
        this.sortType = sortType;
    }

    @Override
    public String getConstraintName() {
        return this.constraintName;
    }

    @Override
    public void setConstraintName(String constraintName) {
        this.constraintName = constraintName;
    }

    @Override
    public String getIndexClass() {
        return this.indexClass;
    }

    @Override
    public void setIndexClass(String indexClass) {
        this.indexClass = indexClass;
    }

    @Override
    public Boolean getAffinity() {
        return this.affinity;
    }

    @Override
    public void setAffinity(Boolean affinity) {
        this.affinity = affinity;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Indexes (");

        sb.append(tableCatalog);
        sb.append(", ").append(tableSchema);
        sb.append(", ").append(tableName);
        sb.append(", ").append(nonUnique);
        sb.append(", ").append(indexName);
        sb.append(", ").append(ordinalPosition);
        sb.append(", ").append(columnName);
        sb.append(", ").append(cardinality);
        sb.append(", ").append(primaryKey);
        sb.append(", ").append(indexTypeName);
        sb.append(", ").append(isGenerated);
        sb.append(", ").append(indexType);
        sb.append(", ").append(ascOrDesc);
        sb.append(", ").append(pages);
        sb.append(", ").append(filterCondition);
        sb.append(", ").append(remarks);
        sb.append(", ").append(sql);
        sb.append(", ").append(id);
        sb.append(", ").append(sortType);
        sb.append(", ").append(constraintName);
        sb.append(", ").append(indexClass);
        sb.append(", ").append(affinity);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(IIndexes from) {
        setTableCatalog(from.getTableCatalog());
        setTableSchema(from.getTableSchema());
        setTableName(from.getTableName());
        setNonUnique(from.getNonUnique());
        setIndexName(from.getIndexName());
        setOrdinalPosition(from.getOrdinalPosition());
        setColumnName(from.getColumnName());
        setCardinality(from.getCardinality());
        setPrimaryKey_(from.getPrimaryKey_());
        setIndexTypeName(from.getIndexTypeName());
        setIsGenerated(from.getIsGenerated());
        setIndexType(from.getIndexType());
        setAscOrDesc(from.getAscOrDesc());
        setPages(from.getPages());
        setFilterCondition(from.getFilterCondition());
        setRemarks(from.getRemarks());
        setSql(from.getSql());
        setId(from.getId());
        setSortType(from.getSortType());
        setConstraintName(from.getConstraintName());
        setIndexClass(from.getIndexClass());
        setAffinity(from.getAffinity());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends IIndexes> E into(E into) {
        into.from(this);
        return into;
    }
}
