/*
 * This file is generated by jOOQ.
*/
package com.jooq.information_schema.tables.pojos;


import com.jooq.information_schema.tables.interfaces.IColumns;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Columns implements IColumns {

    private static final long serialVersionUID = -726657515;

    private String  tableCatalog;
    private String  tableSchema;
    private String  tableName;
    private String  columnName;
    private Integer ordinalPosition;
    private String  columnDefault;
    private String  isNullable;
    private Integer dataType;
    private Integer characterMaximumLength;
    private Integer characterOctetLength;
    private Integer numericPrecision;
    private Integer numericPrecisionRadix;
    private Integer numericScale;
    private String  characterSetName;
    private String  collationName;
    private String  typeName;
    private Integer nullable;
    private Boolean isComputed;
    private Integer selectivity;
    private String  checkConstraint;
    private String  sequenceName;
    private String  remarks;
    private Short   sourceDataType;

    public Columns() {}

    public Columns(Columns value) {
        this.tableCatalog = value.tableCatalog;
        this.tableSchema = value.tableSchema;
        this.tableName = value.tableName;
        this.columnName = value.columnName;
        this.ordinalPosition = value.ordinalPosition;
        this.columnDefault = value.columnDefault;
        this.isNullable = value.isNullable;
        this.dataType = value.dataType;
        this.characterMaximumLength = value.characterMaximumLength;
        this.characterOctetLength = value.characterOctetLength;
        this.numericPrecision = value.numericPrecision;
        this.numericPrecisionRadix = value.numericPrecisionRadix;
        this.numericScale = value.numericScale;
        this.characterSetName = value.characterSetName;
        this.collationName = value.collationName;
        this.typeName = value.typeName;
        this.nullable = value.nullable;
        this.isComputed = value.isComputed;
        this.selectivity = value.selectivity;
        this.checkConstraint = value.checkConstraint;
        this.sequenceName = value.sequenceName;
        this.remarks = value.remarks;
        this.sourceDataType = value.sourceDataType;
    }

    public Columns(
        String  tableCatalog,
        String  tableSchema,
        String  tableName,
        String  columnName,
        Integer ordinalPosition,
        String  columnDefault,
        String  isNullable,
        Integer dataType,
        Integer characterMaximumLength,
        Integer characterOctetLength,
        Integer numericPrecision,
        Integer numericPrecisionRadix,
        Integer numericScale,
        String  characterSetName,
        String  collationName,
        String  typeName,
        Integer nullable,
        Boolean isComputed,
        Integer selectivity,
        String  checkConstraint,
        String  sequenceName,
        String  remarks,
        Short   sourceDataType
    ) {
        this.tableCatalog = tableCatalog;
        this.tableSchema = tableSchema;
        this.tableName = tableName;
        this.columnName = columnName;
        this.ordinalPosition = ordinalPosition;
        this.columnDefault = columnDefault;
        this.isNullable = isNullable;
        this.dataType = dataType;
        this.characterMaximumLength = characterMaximumLength;
        this.characterOctetLength = characterOctetLength;
        this.numericPrecision = numericPrecision;
        this.numericPrecisionRadix = numericPrecisionRadix;
        this.numericScale = numericScale;
        this.characterSetName = characterSetName;
        this.collationName = collationName;
        this.typeName = typeName;
        this.nullable = nullable;
        this.isComputed = isComputed;
        this.selectivity = selectivity;
        this.checkConstraint = checkConstraint;
        this.sequenceName = sequenceName;
        this.remarks = remarks;
        this.sourceDataType = sourceDataType;
    }

    @Override
    public String getTableCatalog() {
        return this.tableCatalog;
    }

    @Override
    public void setTableCatalog(String tableCatalog) {
        this.tableCatalog = tableCatalog;
    }

    @Override
    public String getTableSchema() {
        return this.tableSchema;
    }

    @Override
    public void setTableSchema(String tableSchema) {
        this.tableSchema = tableSchema;
    }

    @Override
    public String getTableName() {
        return this.tableName;
    }

    @Override
    public void setTableName(String tableName) {
        this.tableName = tableName;
    }

    @Override
    public String getColumnName() {
        return this.columnName;
    }

    @Override
    public void setColumnName(String columnName) {
        this.columnName = columnName;
    }

    @Override
    public Integer getOrdinalPosition() {
        return this.ordinalPosition;
    }

    @Override
    public void setOrdinalPosition(Integer ordinalPosition) {
        this.ordinalPosition = ordinalPosition;
    }

    @Override
    public String getColumnDefault() {
        return this.columnDefault;
    }

    @Override
    public void setColumnDefault(String columnDefault) {
        this.columnDefault = columnDefault;
    }

    @Override
    public String getIsNullable() {
        return this.isNullable;
    }

    @Override
    public void setIsNullable(String isNullable) {
        this.isNullable = isNullable;
    }

    @Override
    public Integer getDataType() {
        return this.dataType;
    }

    @Override
    public void setDataType(Integer dataType) {
        this.dataType = dataType;
    }

    @Override
    public Integer getCharacterMaximumLength() {
        return this.characterMaximumLength;
    }

    @Override
    public void setCharacterMaximumLength(Integer characterMaximumLength) {
        this.characterMaximumLength = characterMaximumLength;
    }

    @Override
    public Integer getCharacterOctetLength() {
        return this.characterOctetLength;
    }

    @Override
    public void setCharacterOctetLength(Integer characterOctetLength) {
        this.characterOctetLength = characterOctetLength;
    }

    @Override
    public Integer getNumericPrecision() {
        return this.numericPrecision;
    }

    @Override
    public void setNumericPrecision(Integer numericPrecision) {
        this.numericPrecision = numericPrecision;
    }

    @Override
    public Integer getNumericPrecisionRadix() {
        return this.numericPrecisionRadix;
    }

    @Override
    public void setNumericPrecisionRadix(Integer numericPrecisionRadix) {
        this.numericPrecisionRadix = numericPrecisionRadix;
    }

    @Override
    public Integer getNumericScale() {
        return this.numericScale;
    }

    @Override
    public void setNumericScale(Integer numericScale) {
        this.numericScale = numericScale;
    }

    @Override
    public String getCharacterSetName() {
        return this.characterSetName;
    }

    @Override
    public void setCharacterSetName(String characterSetName) {
        this.characterSetName = characterSetName;
    }

    @Override
    public String getCollationName() {
        return this.collationName;
    }

    @Override
    public void setCollationName(String collationName) {
        this.collationName = collationName;
    }

    @Override
    public String getTypeName() {
        return this.typeName;
    }

    @Override
    public void setTypeName(String typeName) {
        this.typeName = typeName;
    }

    @Override
    public Integer getNullable() {
        return this.nullable;
    }

    @Override
    public void setNullable(Integer nullable) {
        this.nullable = nullable;
    }

    @Override
    public Boolean getIsComputed() {
        return this.isComputed;
    }

    @Override
    public void setIsComputed(Boolean isComputed) {
        this.isComputed = isComputed;
    }

    @Override
    public Integer getSelectivity() {
        return this.selectivity;
    }

    @Override
    public void setSelectivity(Integer selectivity) {
        this.selectivity = selectivity;
    }

    @Override
    public String getCheckConstraint() {
        return this.checkConstraint;
    }

    @Override
    public void setCheckConstraint(String checkConstraint) {
        this.checkConstraint = checkConstraint;
    }

    @Override
    public String getSequenceName() {
        return this.sequenceName;
    }

    @Override
    public void setSequenceName(String sequenceName) {
        this.sequenceName = sequenceName;
    }

    @Override
    public String getRemarks() {
        return this.remarks;
    }

    @Override
    public void setRemarks(String remarks) {
        this.remarks = remarks;
    }

    @Override
    public Short getSourceDataType() {
        return this.sourceDataType;
    }

    @Override
    public void setSourceDataType(Short sourceDataType) {
        this.sourceDataType = sourceDataType;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Columns (");

        sb.append(tableCatalog);
        sb.append(", ").append(tableSchema);
        sb.append(", ").append(tableName);
        sb.append(", ").append(columnName);
        sb.append(", ").append(ordinalPosition);
        sb.append(", ").append(columnDefault);
        sb.append(", ").append(isNullable);
        sb.append(", ").append(dataType);
        sb.append(", ").append(characterMaximumLength);
        sb.append(", ").append(characterOctetLength);
        sb.append(", ").append(numericPrecision);
        sb.append(", ").append(numericPrecisionRadix);
        sb.append(", ").append(numericScale);
        sb.append(", ").append(characterSetName);
        sb.append(", ").append(collationName);
        sb.append(", ").append(typeName);
        sb.append(", ").append(nullable);
        sb.append(", ").append(isComputed);
        sb.append(", ").append(selectivity);
        sb.append(", ").append(checkConstraint);
        sb.append(", ").append(sequenceName);
        sb.append(", ").append(remarks);
        sb.append(", ").append(sourceDataType);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(IColumns from) {
        setTableCatalog(from.getTableCatalog());
        setTableSchema(from.getTableSchema());
        setTableName(from.getTableName());
        setColumnName(from.getColumnName());
        setOrdinalPosition(from.getOrdinalPosition());
        setColumnDefault(from.getColumnDefault());
        setIsNullable(from.getIsNullable());
        setDataType(from.getDataType());
        setCharacterMaximumLength(from.getCharacterMaximumLength());
        setCharacterOctetLength(from.getCharacterOctetLength());
        setNumericPrecision(from.getNumericPrecision());
        setNumericPrecisionRadix(from.getNumericPrecisionRadix());
        setNumericScale(from.getNumericScale());
        setCharacterSetName(from.getCharacterSetName());
        setCollationName(from.getCollationName());
        setTypeName(from.getTypeName());
        setNullable(from.getNullable());
        setIsComputed(from.getIsComputed());
        setSelectivity(from.getSelectivity());
        setCheckConstraint(from.getCheckConstraint());
        setSequenceName(from.getSequenceName());
        setRemarks(from.getRemarks());
        setSourceDataType(from.getSourceDataType());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends IColumns> E into(E into) {
        into.from(this);
        return into;
    }
}
