/*
 * This file is generated by jOOQ.
*/
package com.jooq.my_schema.tables.records;


import com.jooq.my_schema.tables.Address;
import com.jooq.my_schema.tables.interfaces.IAddress;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AddressRecord extends UpdatableRecordImpl<AddressRecord> implements Record4<Integer, String, String, Integer>, IAddress {

    private static final long serialVersionUID = -1068603926;

    /**
     * Setter for <code>MY_SCHEMA.ADDRESS.ID</code>.
     */
    @Override
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>MY_SCHEMA.ADDRESS.ID</code>.
     */
    @Override
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>MY_SCHEMA.ADDRESS.ADDRESS</code>.
     */
    @Override
    public void setAddress(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>MY_SCHEMA.ADDRESS.ADDRESS</code>.
     */
    @Override
    public String getAddress() {
        return (String) get(1);
    }

    /**
     * Setter for <code>MY_SCHEMA.ADDRESS.TYPE</code>.
     */
    @Override
    public void setType(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>MY_SCHEMA.ADDRESS.TYPE</code>.
     */
    @Override
    public String getType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>MY_SCHEMA.ADDRESS.FK_CUST_ID</code>.
     */
    @Override
    public void setFkCustId(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>MY_SCHEMA.ADDRESS.FK_CUST_ID</code>.
     */
    @Override
    public Integer getFkCustId() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Address.ADDRESS.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Address.ADDRESS.ADDRESS_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Address.ADDRESS.TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field4() {
        return Address.ADDRESS.FK_CUST_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getAddress();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component4() {
        return getFkCustId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getAddress();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value4() {
        return getFkCustId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AddressRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AddressRecord value2(String value) {
        setAddress(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AddressRecord value3(String value) {
        setType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AddressRecord value4(Integer value) {
        setFkCustId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AddressRecord values(Integer value1, String value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(IAddress from) {
        setId(from.getId());
        setAddress(from.getAddress());
        setType(from.getType());
        setFkCustId(from.getFkCustId());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends IAddress> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AddressRecord
     */
    public AddressRecord() {
        super(Address.ADDRESS);
    }

    /**
     * Create a detached, initialised AddressRecord
     */
    public AddressRecord(Integer id, String address, String type, Integer fkCustId) {
        super(Address.ADDRESS);

        set(0, id);
        set(1, address);
        set(2, type);
        set(3, fkCustId);
    }
}
