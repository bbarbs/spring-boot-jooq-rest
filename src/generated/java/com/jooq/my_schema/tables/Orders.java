/*
 * This file is generated by jOOQ.
*/
package com.jooq.my_schema.tables;


import com.jooq.my_schema.Indexes;
import com.jooq.my_schema.Keys;
import com.jooq.my_schema.MySchema;
import com.jooq.my_schema.tables.records.OrdersRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Orders extends TableImpl<OrdersRecord> {

    private static final long serialVersionUID = -1094984721;

    /**
     * The reference instance of <code>MY_SCHEMA.ORDERS</code>
     */
    public static final Orders ORDERS = new Orders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersRecord> getRecordType() {
        return OrdersRecord.class;
    }

    /**
     * The column <code>MY_SCHEMA.ORDERS.ID</code>.
     */
    public final TableField<OrdersRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>MY_SCHEMA.ORDERS.DATE_ORDER</code>.
     */
    public final TableField<OrdersRecord, Timestamp> DATE_ORDER = createField("DATE_ORDER", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>MY_SCHEMA.ORDERS.STATUS</code>.
     */
    public final TableField<OrdersRecord, String> STATUS = createField("STATUS", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>MY_SCHEMA.ORDERS.AMOUNT</code>.
     */
    public final TableField<OrdersRecord, BigDecimal> AMOUNT = createField("AMOUNT", org.jooq.impl.SQLDataType.DECIMAL(19, 4), this, "");

    /**
     * The column <code>MY_SCHEMA.ORDERS.FK_CUST_ID</code>.
     */
    public final TableField<OrdersRecord, Integer> FK_CUST_ID = createField("FK_CUST_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>MY_SCHEMA.ORDERS</code> table reference
     */
    public Orders() {
        this(DSL.name("ORDERS"), null);
    }

    /**
     * Create an aliased <code>MY_SCHEMA.ORDERS</code> table reference
     */
    public Orders(String alias) {
        this(DSL.name(alias), ORDERS);
    }

    /**
     * Create an aliased <code>MY_SCHEMA.ORDERS</code> table reference
     */
    public Orders(Name alias) {
        this(alias, ORDERS);
    }

    private Orders(Name alias, Table<OrdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Orders(Name alias, Table<OrdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MySchema.MY_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_8, Indexes.PRIMARY_KEY_8);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OrdersRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ORDERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrdersRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_8;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrdersRecord>> getKeys() {
        return Arrays.<UniqueKey<OrdersRecord>>asList(Keys.CONSTRAINT_8);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OrdersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrdersRecord, ?>>asList(Keys.CONSTRAINT_8B);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Orders as(String alias) {
        return new Orders(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Orders as(Name alias) {
        return new Orders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(String name) {
        return new Orders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(Name name) {
        return new Orders(name, null);
    }
}
